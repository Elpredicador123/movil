{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","estadoInicial","dni","respuesta","prestamos","cliente","useState","state","setstate","className","htmlFor","type","name","id","onChange","e","value","target","placeholder","onClick","valor","fetch","then","res","json","data","catch","console","log","alert","nombreCliente","map","i","key","montoPrestamo","fechaPrestamo","estadoPrestamo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6919d6d6.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const estadoInicial ={\n    dni:'',\n    respuesta:false,\n    prestamos:[],\n    cliente:[]\n  }\n  const [state, setstate] = useState(estadoInicial)\n  const cambioEstado=(name,value)=>{\n      setstate({...state,[name]:value})\n  }\n  const reiniciarEstado = ()=>{\n      setstate(estadoInicial)\n  }\n  const consumirApi=(valor)=>{\n      if (valor) {\n          const URL_API=\"https://mihbapi.herokuapp.com/api/prestamoscliente?dniCliente=\"\n          fetch(URL_API+`${valor}`)\n          .then(res => res.json())\n          .then(data => {\n              setstate({\n                  dni:valor,\n                  respuesta:true,\n                  prestamos:data[0],\n                  cliente:data[1]\n              })\n          })\n          .catch((e) =>  {\n              console.log(e)\n              alert(\"Ingresa el número de DNI correcto\")\n          })\n      }else{\n          alert(\"Ingresa el número de DNI\")\n      }\n  }\n  if (state.respuesta === false) {\n      return (\n        <div className=\"col-12 px-4\">\n          <div className=\"form-group mb-3\">\n            <label htmlFor=\"dni\" className=\"text-secondary\" >Dni del Cliente</label>\n            <input type=\"number\" className=\"form-control mt-1\" name=\"dniCliente\" id=\"dni\" onChange={(e) => cambioEstado('dni',e.target.value)} placeholder=\"Introduce tu DNI\"/>\n          </div>\n          <button type=\"button\" name=\"\" id=\"\" onClick={()=>consumirApi(state.dni)}  className=\"btn btn-info text-light col-12\" >Comprobar</button>\n        </div>\n      )\n  }else if (state.respuesta === true) {\n      return (\n          <div className=\"col-12 px-4\">\n            <div className=\"row\">\n              <div className=\"col-12 px-3 my-3\">\n                  <p>\n                      Bienvenido,<span className=\"h5 text-success\"> {state.cliente.nombreCliente}</span> , a nuestra aplicacion de comprobacion de prestamo.\n                  </p>\n              </div>\n              <div className=\"col-12 px-3 mb-3\">\n                  <p className=\"h3 text-info border-2 border-bottom border-info pb-2\">\n                      Listado de Prestamos\n                  </p>\n              </div>\n              {state.prestamos.map((i,key)=>{\n                  return (\n                      <div key={key} className=\"col-12 my-2 shadow-sm rounded-3 p-2 card\">\n                          <div className=\"card-body\">\n                            <p className=\"card-title h5\">Prestamo N° {key+1}: </p>\n                            <p className=\"card-subtitle\">Monto:\n                              <span className=\"text-success\"> $ {i.montoPrestamo}</span> \n                            </p>\n                            <p className=\"card-subtitle\">Fecha de Solicitud:\n                              <span className=\"text-success\"> {i.fechaPrestamo}</span> \n                            </p>\n                            <p className=\"card-subtitle\">Estado:\n                              <span className=\"text-success\"> {i.estadoPrestamo}</span> \n                            </p>\n                          </div>\n                      </div>\n                      )\n                  })\n              }\n              <button type=\"button\" name=\"\" id=\"\" onClick={()=>{reiniciarEstado()}} className=\"btn btn-info text-light\" >Volver</button>\n            </div>\n          </div>\n      )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container principal min-vh-100 p-3\">\n      <div className=\"row\">\n        <div className=\"col-12 p-4 text-info border-bottom border-info mb-4\">\n            <p className=\"h2 pb-2 border-bottom border-info border-4 text-uppercase\"> \n              Prestamos\n            </p> \n            <p className=\"text-secondary\"> \n              Comprobar estado de solicitudes\n            </p> \n        </div>\n        <App />\n      </div>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}